<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kcy.bill.mapper.BillsMapper">

<select id="majorbList" resultType="com.kcy.bill.service.MajorbVO">
	SELECT m.major_id, m.major_name, COUNT(u.user_type) AS cnt
	FROM k_users u
	JOIN k_major m 
	ON u.user_dept = m.major_name 
	WHERE user_type = 'ROLE_STU'
	GROUP BY user_dept
	<![CDATA[HAVING cnt > 0]]>
	ORDER BY major_id asc
</select>

<insert id="billsInsert" parameterType="com.kcy.bill.service.BillsVO">
INSERT INTO k_bills ( bill_id, bill_year, bill_sem, bill_amount, major_id, bill_b, bill_bplus, bill_s1, bill_s2, bill_s3, bill_s4)
SELECT #{billId}, 
	   #{billYear}, 
	   #{billSem}, 
	   #{billAmount}, 
	   #{majorbId},
	   SUBSTRING(CONCAT('\'',(SELECT GROUP_CONCAT(sch_id separator ',') as sch FROM k_schedule WHERE (sch_title LIKE #{billYear2} AND sch_title LIKE #{hakgi} AND sch_title LIKE '%등록%')), '\''),2,7) AS b,
	   SUBSTRING(CONCAT('\'',(SELECT GROUP_CONCAT(sch_id separator ',') as sch FROM k_schedule WHERE (sch_title LIKE #{billYear2} AND sch_title LIKE #{hakgi} AND sch_title LIKE '%등록%')), '\''),10,7) AS bplus,
	   SUBSTRING(CONCAT('\'',(SELECT GROUP_CONCAT(sch_id separator ',') as sch FROM k_schedule WHERE (sch_title LIKE #{billYear2} AND sch_title LIKE #{hakgi} AND sch_title LIKE '%등록%')), '\''),18,7) AS s1,
	   SUBSTRING(CONCAT('\'',(SELECT GROUP_CONCAT(sch_id separator ',') as sch FROM k_schedule WHERE (sch_title LIKE #{billYear2} AND sch_title LIKE #{hakgi} AND sch_title LIKE '%등록%')), '\''),26,7) AS s2,
	   SUBSTRING(CONCAT('\'',(SELECT GROUP_CONCAT(sch_id separator ',') as sch FROM k_schedule WHERE (sch_title LIKE #{billYear2} AND sch_title LIKE #{hakgi} AND sch_title LIKE '%등록%')), '\''),34,7) AS s3,
	   SUBSTRING(CONCAT('\'',(SELECT GROUP_CONCAT(sch_id separator ',') as sch FROM k_schedule WHERE (sch_title LIKE #{billYear2} AND sch_title LIKE #{hakgi} AND sch_title LIKE '%등록%')), '\''),42,7) AS s4
</insert>


<select id="payStdInfo" resultType="com.kcy.bill.service.PayVO">
	SELECT u.user_dept, 
		   kph.pay_h_grade,  
		   kph.pay_h_sem,
		   s.student_aca_yn, 
		   kph.pay_h_type, 
		   kph.pay_h_yn
	FROM k_students s
	JOIN k_users u
	ON s.stu_id = u.user_id
	JOIN k_pay_h kph
	ON s.stu_id = kph.stu_id
	JOIN k_bills b 
	ON kph.bill_id = b.bill_id
	WHERE b.bill_year = #{billYear}
	AND b.bill_sem = #{billSem} 
	AND kph.stu_id = #{stuId}
</select>

<select id="payInfo" resultType="com.kcy.bill.service.PayVO">
	SELECT kph.pay_h_type, 
		   kph.pay_h_remain, 
		   kpd.pay_d_amount, 
		   kpd.pay_d_bank,
		   kpd.pay_d_balance,
		   kpd.pay_d_day 
	FROM k_pay_h kph
	LEFT JOIN k_pay_d kpd
	ON kph.pay_id = kpd.pay_id
	JOIN k_bills b
	ON kph.bill_id = b.bill_id 
	WHERE b.bill_year = #{billYear} 
	AND b.bill_sem = #{billSem} 
	AND kph.stu_id = #{stuId}
</select>

<select id="payCheck" resultType="com.kcy.bill.service.PayVO">
	SELECT kph.stu_id, 
		   u.user_name, 
		   u.user_dept, 
		   kph.pay_h_grade, 
		   u.user_phone,
		   kph.pay_h_type,
		   kph.pay_h_yn,
		   kpd.pay_d_day 
	FROM k_pay_h kph
	JOIN k_students s 
	ON kph.stu_id = s.stu_id 
	JOIN k_users u 
	ON kph.stu_id = u.user_id
	LEFT JOIN k_pay_d kpd 
	ON kph.pay_id = kpd.pay_id 
	JOIN k_bills kb 
	ON kb.bill_id = kph.bill_id
	<where>
		<if test="billYear != null and billYear != ''">
			and kb.bill_year = #{billYear}
		</if>
		<if test="billSem != null and billSem != ''">
			and kb.bill_sem = #{billSem}
		</if>
		<if test="userDept != null and userDept != ''">
			and u.user_dept = #{userDept} 
		</if>
		<if test="payHType != null and payHType != ''">
			and kph.pay_h_type = #{payHType}
		</if>
		<if test="payHYn != null and payHYn != ''">
			and kph.pay_h_yn = #{payHYn}
		</if>
	</where>
</select>

<insert id="payInsert" parameterType="com.kcy.bill.service.PayVO">
	INSERT INTO k_pay_h (bill_id, pay_id, stu_id, pay_h_grade, pay_h_sem)
	SELECT  b.bill_id,
			CONCAT(s.stu_id, b.bill_id),
			s.stu_id, 
			s.student_grade, 
			b.bill_sem
	FROM k_students s
	JOIN k_users u
	ON s.stu_id = u.user_id 
	JOIN k_major m 
	ON m.major_name = u.user_dept
	JOIN k_bills b
	ON m.major_id = b.major_id 
	WHERE b.bill_id = #{billId}
	AND s.student_aca_yn = '재학';	
</insert>

<insert id="chkPayInsert" parameterType="com.kcy.bill.service.PayVO">
	INSERT INTO k_pay_h (bill_id, pay_id, stu_id, pay_h_grade, pay_h_sem)
	SELECT  b.bill_id,			
			CONCAT(s.stu_id, b.bill_id),
			s.stu_id, 
			s.student_grade, 
			b.bill_sem
	FROM k_students s
	JOIN k_users u
	ON s.stu_id = u.user_id 
	JOIN k_major m 
	ON m.major_name = u.user_dept
	JOIN k_bills b	
	ON m.major_id = b.major_id 
	WHERE b.bill_id IN 
	<foreach collection="id" item="Id" separator="," open="(" close=")" >
		#{Id}
	</foreach>
	AND s.student_aca_yn = '재학';
</insert>

<select id="billCheck" resultType="com.kcy.bill.service.PayVO">
	SELECT DISTINCT b.bill_year,
		   b.bill_sem,
		   u.user_id,
		   u.user_dept,
		   u.user_name,
		   kph.pay_h_grade,  
		   kph.pay_h_sem,
		   b.bill_amount,
		   (b.bill_amount/kph.pay_h_total) AS a,
		   ROUND ((kph.pay_h_s1/(kph.pay_h_total-1)), -3) AS b,
	  	   ROUND ((kph.pay_h_s2/(kph.pay_h_total-2)), -3) AS c,
	       kph.pay_h_s3 AS d,	   
		   kb.sch_start AS kbs, 
		   kb.sch_end AS kbe,
		   ks1.sch_start AS ks1s, 
		   ks1.sch_end AS ks1e,	   
		   ks2.sch_start AS ks2s, 
		   ks2.sch_end AS ks2e,
		   ks3.sch_start AS ks3s, 
		   ks3.sch_end AS ks3e,
		   ks4.sch_start AS ks4s, 
		   ks4.sch_end AS ks4e,	   
		   kph.pay_h_type,
		   kph.pay_id,
		   kph.pay_h_yn,
		   kph.pay_h_s1,
		   kph.pay_h_s2,
		   kph.pay_h_s3  
	FROM k_students s
	JOIN k_users u ON s.stu_id = u.user_id
	JOIN k_pay_h kph ON s.stu_id = kph.stu_id
	LEFT JOIN k_pay_d kpd ON kph.pay_id = kpd.pay_id 
	JOIN k_bills b ON kph.bill_id = b.bill_id
	JOIN k_schedule kb ON kb.sch_id = b.bill_b
	JOIN k_schedule ks1 ON ks1.sch_id = b.bill_s1 
	JOIN k_schedule ks2 ON ks2.sch_id = b.bill_s2
	JOIN k_schedule ks3 ON ks3.sch_id = b.bill_s3
	JOIN k_schedule ks4 ON ks4.sch_id = b.bill_s4
	WHERE b.bill_year = #{billYear}
	AND b.bill_sem = #{billSem} 
	AND kph.stu_id = #{stuId}	
</select>

<select id="billList" resultType="com.kcy.bill.service.BillsVO">
	SELECT DISTINCT b.bill_id, 
		   			b.bill_year, 
		   			b.bill_sem, 
		   			b.bill_amount, 
		   			m.major_name,
		   			m.major_id,
		   			kph.bill_id AS pId		   			
	FROM k_bills b
	JOIN k_major m
	ON b.major_id = m.major_id
	LEFT JOIN k_pay_h kph 
	ON b.bill_id = kph.bill_id 
	<where>
		<if test="billYear != null and billYear != ''">
			and b.bill_year = #{billYear}
		</if>
		<if test="billSem != null and billSem != ''">
			and b.bill_sem = #{billSem}
		</if>
		<if test="majorbId != null and majorbId != ''">
			and m.major_id = #{majorbId}
		</if>		
	</where>
	AND b.bill_type = 'b'	
</select>

<update id="billUpdate" parameterType="com.kcy.bill.service.BillsVO">
	UPDATE k_bills 
 	SET bill_amount = #{billAmount}
 	WHERE bill_id = #{billId}
</update>

<update id="payChange" parameterType="com.kcy.bill.service.PayVO">	
	UPDATE k_pay_h 
	SET pay_h_type = #{payHType},
	pay_h_total = #{payHTotal},
	pay_h_remain = #{payHRemain}
	WHERE pay_id = #{payId}
</update>

<update id="payChangeCancel" parameterType="com.kcy.bill.service.PayVO">	
	UPDATE k_pay_h 
	SET pay_h_type = 'b',
	pay_h_total = 1,
	pay_h_remain = 1
	WHERE pay_id = #{payId}
</update>

<update id="insertToken" parameterType="com.kcy.bill.service.PayVO">
	UPDATE k_students
	SET student_token = #{accessToken}
	WHERE stu_id = #{stuId}
</update>

<insert id="payD" parameterType="com.kcy.bill.service.PaySVO">
	INSERT INTO k_pay_d (pay_d_amount, pay_d_balance, pay_d_bank, pay_d_day, pay_id)
	VALUES ( #{amount}, #{balance}, #{bank}, NOW(), #{payId} )
</insert>

<update id="firstPay" parameterType="com.kcy.bill.service.PaySVO">
	UPDATE k_pay_h
	SET pay_h_s1 = #{balance}			
	WHERE pay_id = #{payId}
</update>

<update id="secondPay" parameterType="com.kcy.bill.service.PaySVO">
	UPDATE k_pay_h
	SET pay_h_s2 = #{balance}			
	WHERE pay_id = #{payId}
</update>

<update id="thirdPay" parameterType="com.kcy.bill.service.PaySVO">
	UPDATE k_pay_h
	SET pay_h_s3 = #{balance}			
	WHERE pay_id = #{payId}
</update>

<update id="payRemain" parameterType="com.kcy.bill.service.PaySVO">
	UPDATE k_pay_h
	SET pay_h_remain = CASE 
			WHEN pay_h_remain = 4 THEN 3
			WHEN pay_h_remain = 3 THEN 2
			WHEN pay_h_remain = 2 THEN 1
			WHEN pay_h_remain = 1 THEN 0
			ELSE 0
	END
	WHERE pay_id = #{payId}
</update>

<update id="payYn" parameterType="com.kcy.bill.service.PaySVO">
	UPDATE k_pay_h
	SET pay_h_yn = CASE
				WHEN pay_h_remain = 3 THEN 's'
				WHEN pay_h_remain = 2 THEN 's'
				WHEN pay_h_remain = 1 THEN 's'
				WHEN pay_h_remain = 0 THEN 'y'
	END
	WHERE pay_id = #{payId}
</update>
</mapper>