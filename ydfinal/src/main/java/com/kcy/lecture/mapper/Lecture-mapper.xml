<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kcy.lecture.mapper.LectureMapper">

		<insert id="lectureInsert">
			insert into k_class_reg(
				  class_id,
				  course_id,
			  	  prof_id,
			   	  class_to,
			      class_year,
			      class_sem,
			      class_syl,
			      class_yn,
			      class_title,
			      class_syl_original
			      )
			values(
				   CONCAT("CL",NEXTVAL(class_no_seq)),
				   #{courseId},
				   #{profId},
				   #{classTo},
				   2022,
				   #{classSem},
				   #{classSyl},
				   default,
				   #{classTitle},
				   #{classSylOriginal}
				   )
		
		</insert>
		
		
		
		<select id="lectureList" resultType="com.kcy.lecture.service.LectureVO">
			select 
			kcr.class_title , 
			kcr.class_id, 
			kcr.course_id, 
			kcr.prof_id, 
			kc.course_credit, 
			kcr.class_to, 
			kcr.class_sem, 
			kcr.class_syl_original,
			kcr.class_yn
			 from k_class_reg kcr join k_course kc on kcr.course_id = kc.course_id 
			 order by class_id;
		</select>
		
		<update id="lectureUpdate" parameterType="com.kcy.lecture.service.LectureVO">
				
			UPDATE k_class_reg
			 SET class_yn = 'y'
			WHERE class_id = #{classId}
			
		</update>
		
		<insert id="lectureInsertClass">
			insert into k_class(
				class_id, 
			    course_id, 
				prof_id, 
				class_to, 
				class_year, 
				class_sem, 
				class_syl
						 )
			select class_id, 
				course_id, 
				prof_id, 
				class_to, 
				class_year, 
				class_sem, 
				class_syl
			  from k_class_reg
			 where class_id = #{classId}
		</insert>
		
		<select id="openLectureList" resultType="com.kcy.lecture.service.OpenLectureVO">
		
			SELECT c.class_id,
			       j.major_name, 
			       u.user_name, 
			       co.course_title, 
			       c.course_id, 
			       co.course_type, 
			       co.course_credit, 
			       CONCAT(c.class_sem,'학기') as classSem,
			       c.class_to, 
			       c.class_ck, 
			       c.class_syl
			       
			  from k_class  as c 
			  join k_course as co  on c.course_id  = co.course_id 
			  join k_users  as u   on u.user_id = c.prof_id  
			  join k_major  as j   on j.major_id = co.major_id 
			 where class_id not in  (SELECT class_id  
			                           from k_class_member 
			                          where stu_id =#{userId})
			order by class_id
		</select>
	
</mapper>