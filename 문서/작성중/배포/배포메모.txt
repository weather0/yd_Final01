/////////////////////////////////////////////////////////////////////////////
// gradle 빌드하기(굳이 안해줘도 됨. 이제 젠킨스로 자동화할거니깐)

// 방법1: 이클립스
https://kitty-geno.tistory.com/109
→ 프로젝트\build폴더 생성되고 하위\libs 위치에 ydfinal-0.0.1-SNAPSHOT.jar 파일 생성됨. 

// 방법2: cmd
ydfinal\ 위치에서
gradlew build

// ydfinal\build\libs 위치에서 cmd로 실행해보자(이제 이클립스 없이도 단독 run이 가능하다)
java -jar ydfinal-0.0.1-SNAPSHOT.jar
// 종료
명령창 아무데나 찍고 Ctrl+C



/////////////////////////////////////////////////////////////////////////////
// 아마존 AWS EC2

// 가입 및 탄력적IP세팅은 구글링
  가입할 때 주의! 최종단계에서 '자기EC2키.pem'은 딱 한번 그 때만 다운 받을 수 있다!(분실 주의!)
  리눅스는 우분투,아마존리눅스2 등 프리티어 아무거나 하면 되는데 여기서는 갓마존리눅스2로 진행한다

// 보안그룹 생성
AWS EC2 > 네트워크 및 보안 > 보안 그룹 > 보안 그룹 생성 (포트주의!)
EC2 인스턴스 우클릭 > 보안 > 보안 그룹 변경해서 방금 생성한 거 지정.

// 보안그룹 인바운드 규칙추가 (매우중요!)
포트범위: 80 추가. 도커쪽에서 8080으로 세팅할 거면 8080도 추가해주자.
소스: 일단 내 네트워크환경(집,학원 등)에서만 접속하고 싶으면 "내IP"선택. 일반적으로는 공개니깐 Anywhere-IPv4(0.0.0.0) 선택하면 됨.

// 접속하기
// 방법1: AWS웹사이트에서 바로 접속
AWS사이트 > EC2 > 인스턴스에 연결: 주황색 '연결'버튼 눌르면 됨

// 방법2: PuTTY로 접속(가장 추천!)
1. PuTTY Key Generator 실행
  File > Load Private Key > All Files(*.*)해서 자기EC2키.pem 열기
  딴 거 건드리지 말고 Save private key(passphrase뭐시기 Warning창 떠도 무시하고 '예'하면 됨)
  → 자기EC2키.ppk

2. PuTTY 실행 (PuTTY Configuration 세팅)
  Connection > SSH > Auth탭: Private key file에 자기EC2키.ppk 선택
  Session탭: Host Name에  ec2-3-37-203-116.ap-northeast-2.compute.amazonaws.com
    (AWS사이트 > EC2 > 인스턴스에 연결 > SSH클라이언트탭에서 확인 가능)
    하단 Saved Session에 프리셋으로 Save해놓자.
    그리고 OPEN!!!
    → login as: 라고 뜨면 ec2-user 입력
    → EC2로고 그래픽 뜨면 성공! 
  *터미널창에 아무것도 안 뜰 경우: EC2 보안그룹 인바운드규칙에 22번포트 Anywhere-IPv4 되어있는지 확인


// 타임존 변경
$ sudo su - root // 루트계정으로 변경
$ sudo rm /etc/localtime
$ sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime
$ date // 타임존 확인
  // 재부팅해도 고정되게
  $ vim /etc/sysconfig/clock 파일 열어서
  ZONE="Asia/Seoul" 로 수정저장(vi편집기 사용법 알제?)
  // 인스턴스 재부팅하고 $ date로 확인해보자



/////////////////////////////////////////////////////////////////////////////
// docker 

/////// (윈도우 작업) /////////////
1. WSL2설치(https://learn.microsoft.com/ko-kr/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package)
  // 6단계 마소스토어에서 리눅스 받는거 안해도 됨!
  // 1,2,3건너뛰고 4단계 - Linux 커널 업데이트 패키지(wsl_update_x64.msi) 다운로드만 받아서 실행해주면 됨!

2. 도커 데스크톱 윈도우버전 설치

3. DockerFile 작성 - 프로젝트 루트폴더에 보관(build.gradle이랑 같이 있으면 됨)
FROM openjdk:11-jre
ARG JAR_FILE=build/libs/*.jar
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java","-jar", "/app.jar"]


/////// (EC2리눅스 작업) /////////////
// 패키지 업데이트
$ sudo yum update -y

// docker 설치
$ sudo amazon-linux-extras install docker
또는
$ sudo yum -y upgrade
$ sudo yum -y install docker

  // 정상설치 확인
  $ docker --version
  또는
  $ docker -v

// 실행
$ sudo systemctl restart docker
또는
$ sudo service docker start

  // 정상설치 확인
  $ docker ps
  // 다음이 뜨면 잘 된 것
  CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
  // 또는 서비스 실행으로 확인
  $ systemctl status docker.service // →active(running) 상태면 정상실행중

// Docker 그룹에 sudo 추가
// (인스턴스 접속 후 도커 바로 제어할 수 있도록
// = ec2-user를 사용하지 않고도 도커 명령을 실행할 수 있도록
// = 번거롭게 sudo 안치고 docker명령어 입력가능하게 라고 좀 쉽게 말해주지 하..)
$ sudo usermod -aG docker ec2-user
$ sudo usermod -a -G docker jenkins // 젠킨스도 해주자
  // 컨테이너 확인
  $ docker ps -a
  // 실행중 도커서비스 확인
  $ docker info

// 테스트 실행(이미지 생성하면서 컨테이너 내부로 접속)
$ docker run hello-world(이미지 이름)

// 컨테이너에서 빠져나오기
정지하면서 나오기: exit 또는 Ctrl+D
정지안하고 나오기: Ctrl+P,Q

// 이미 존재하는 컨테이너 실행
$ docker start 컨테이너ID(예: 9cfe375d59b5)

// 이미 실행중인 컨테이너 정지
$ docker stop 컨테이너ID(예: 9cfe375d59b5)

// 이미 실행중인 컨테이너 접속
$ docker exec -it 컨테이너ID /bin/bash
→ 터미널명령 주체가 root@컨테이너ID로 바뀜

// 컨테이너 타임존 확인
접속전이면: $ docker exec 컨테이너ID date
접속상태면: date

// 컨테이너 타임존 변경
방법1: /etc/localtime 마운트(구글링)
방법2: TZ변수 수정
  run할때 -e TZ=Asia/Seoul 옵션 추가



// 도커볼륨 생성 및 마운트
$ docker volume create kcy-vol // kcy-vol명으로 볼륨 생성
$ docker volume ls // 볼륨 목록 확인
$ docker volume inspect kcy-vol // 볼륨 정보 확인
  // 도커 안에 볼륨이라는 상시 고정 영역이 생겨서 젠킨스빌드작업 새로 해도 그 안의 데이터는 살아있음
  // = 파일 업로드 용(간이파일서버)으로 쓸수 있다 이말임



// 콘솔로그 찍기
docker logs 컨테이너ID





/////////////////////////////////////////////////////////////////////////////
// 젠킨스 

// 윈도우버전 설치 (D:\ci에 설치, 설치단계중 포트번호 800으로 입력)
D:\ci\jenkins.xml 열어서 수정
<env name="JENKINS_HOME" value="D:\ci\jenkins_home"/>
 // 윈도우서비스 - jenkins 다시시작


// localhost:800 처음 접속하면 key요구함→
D:\ci\jenkins_home\secrets\initialAdminPassword 확인
install suggested plug-in선택하면 권장플러그인 설치진행됨
최초가입폼: 계정명,암호,이름 무시하고 밑에 skip and continue as admin


// 로그인기능 끄기
D:\ci\jenkins_home\config.xml 열어서 수정 
<useSecurity>false</useSecurity>
 // 윈도우서비스 - jenkins 다시시작


// Jenkins 관리 > Global Tool Configuration 세팅(캡처 참고)
JDK
  Name: 아무거나
  JAVA_HOME: C:\Program Files\Java\jdk-11.0.16 // 자기 java설치 경로 입력
Git
  Name: 아무거나
  Path to Git exe: C:\Program Files\Git\bin\git.exe // 자기 git설치 경로 입력
Gradle
  // 그래들은 Install automatically하자


// Jenkins 관리 > Plugin Manager
설치가능탭(Available plugins) 검색해서 설치: Publish Over SSH
설치진행완료되면 "설치가 끝나고 실행중인 작업이 없으면 젠킨스 재시작" 클릭
→ "곧 Jenkins가 종료될 예정입니다" 상태로 무한 멈춤상태되는데
  걍 적당히 있다가 창 껐다가 다시 들어오면 됨


// Jenkins 관리 > 시스템설정(Configure System)
Usage Statistics: 체크해제

Publish over SSH(꽤 하단에 있음) (캡쳐참고)
  Key: kcykey.pem내용 복붙
  SSH Servers:
    Nmae: 아무거나
    Hostname: EC2탄력적ip
    username: ec2-user // 오타주의!! 잘못 입력하면 접속 fail남
    → Test Configuration눌러서 Success 뜨는지 확인해보자



// 새로운 item - Freestyle프로젝트('git빌드프로젝트')하나 만들기

// git빌드프로젝트 > 구성Configuration(캡처참고)
1.소스코드관리 - Git선택하고 자기 주소 넣기

2.Build Steps(거의 젤 밑에)
  Add built step - Invoke Gradle script
    그래들 버전: myGradle(쫌전에 만든거)
    Tasks: (줄바꿈으로 한줄씩 입력)
      clean // 기존 빌드 클린
      build // 실제 빌드 작업
    고급-Build File: ydfinal/build.gradle (깃 경로 주의!)

  Add built step - Execute Windows batch command
    (방식1: 직접 타이핑)
    docker build -t test_kcy . // (끝에 마침표(.) 누락안되게 주의!) 깃에서 땡겨온 프로젝트를 빌드해서 test_kcy라는 이미지 생성
    docker tag test_kcy weather0/test_kcy // 로컬 이미지 'test_kcy' 내용을 복사해서 weather0/test_kcy(도커원격repo명)라는 명으로 새 이미지를 복사생성하는 명령
    docker login // 윈도우 docker desktop 프로그램 켜놓으면 자동으로 로그인 됨
    docker push weather0/test_kcy
    @echo end of batch

    (방식2: 배치파일 만들고 그 경로 입력)
    D:\ci\docker_bat.bat

      배치파일 내용
      cd ydfinal
      docker login -u 도커아디 -p 도커비번 // 보안상 위험하다
      docker build -t test_kcy .
      docker tag test_kcy weather0/test_kcy
      docker push weather0/test_kcy
      @echo end of batch

      배치파일 위치(아무데나 크게 상관은 없다. 위에 경로 지정만 잘해주면 됨)
      D:\ci


3.빌드 후 조치 - 빌드 후 조치 추가
  Send build artifacts over SSH
    SSH Server:
      Name: mySSH
      Transfers:
        Remote directory: /home
        Exec command: 
          docker pull weather0/test_kcy // weather0/test_kcy 이미지를 pull
          docker rm -f $(docker ps -aq) // 기존 컨테이너를 삭제
          docker run -v kcy-vol:/aa -e TZ=Asia/Seoul -dp 8080:80 weather0/test_kcy 
          // run: 도커이미지 실행
          // -dp: 내로컬 localhost:80 프로젝트 → ec2(최종사용자접속) x.x.x.x:8080
            // 이 8080을 EC2 보안그룹에서 규칙 추가해줘야 함(위에 설명 참고)
            // 그냥 80:80이 젤 낫다. 브라우저상 80은 기본값이라 생략해도 접속되기 때문에. 안 그럼 도메인 사서 연결해도 kcy.com:8080 이렇게 쳐야 들어가짐
          // -v kcy-vol:/aa: 도커볼륨 kcy-vol의 /aa/폴더를 사용하겠다 지정
          // -e TZ=Asia/Seoul: 타임존을 서울로 설정



// 일단 이 시점에서 테스트로 한번 지금 빌드 해보자
  "지금 빌드" 실행:
    fail 뜨면 일단 docker desktop 프로그램 켰는지 확인해보자. 
    clean task부터 compileJava 오류나면 일단 컴 재부팅해서 다시 해보고(종종 재부팅 재실행만으로도 해결됨), 
    그래도 안되면 clean --debug 옵션 추가해서 로그확인해보자.
    이건 jdk버전 호환문제일 수 있으니 build.gradle의 jdk버전과 젠킨스에서 위에 설정한 
    jdk버전과 일치하는지 확인해보자. 안되면 구글링ㄱㄱ




/////////////////////////////////////////////////////////////////////////////
// 서버 띄우고 반드시 처리해야할 후작업

// 로컬에서 잘되는데 서버띄운 사이트에서 특정페이지 안들어가지는 경우!
(새싹코더 https://jg-han.tistory.com/100)
컨트롤러에서 return "/pages~~ 여기서 슬래시/빼고 바로 "pages~ 해야 서버 500오류 안 남


// DB연결 안되는 경우(도커 이미지에 매퍼.xml파일이 빠져서 올라가는 경우)
build.gradle에 다음을 추가해주자
(매퍼.xml 위치가 정석인 resources안에 모여있지 않고 각 기능패키지 안에 들어간 구조인 경우 필수!)
  sourceSets {
    main {
      resources {
        srcDir "src/main/java"
      }
    }
  }


// 파일 업로드 처리 (도커볼륨이용)



// 풀캘린더 일정 등 각종 시간관련 데이터 +9시간으로 뜨는 경우(로컬판이랑 실시간으로 차이날때)
EC2리눅스 타임존 KST로 설정 + 도커 타임존 KST로 설정(위에 매뉴얼 참고)





//////////////////////////////////////////////////////////////////////////////////
// 도메인 연결
porkbun에서 A레코드에 탄력적ip추가해주면 끝.
(구글링 도배되어있는 aws route53 안해도 됨. 그거 유료임)
리눅스는 우분투,아마존리눅스2 등 프리티어 아무거나 하면 되는데 여기서는 갓마존리눅스2로 진행한다


















//////////////////////////////////////////////////////////////////////////////////
굳이 안해도 됨

// 도커compose 설치
$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.0-rc2/docker-compose-`uname -s`-`uname -m` -o/usr/local/bin/docker-compose
  // 실행 권한 추가
  $ sudo chmod +x /usr/local/bin/docker-compose
  // 설치 확인
  $ docker-compose -v

// 도커-machine 설치
  // 리눅스인 경우
  $ base=https://github.com/docker/machine/releases/download/v0.16.0 &&
curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
sudo install /tmp/docker-machine /usr/local/bin/docker-machine
  // 설치 확인
  $ docker-machine -v





// 도커 허브에서 이미지 받기
$ docker pull {Docker hub id}/{Docker hub repository name}
  // 이미지 확인
  $ docker images



// 이미지→컨테이너화
docker run -d -p 8080:8080 {docker hub id}/{docker buh repository name}:latest
  // 컨테이너 확인
  $ docker ps








